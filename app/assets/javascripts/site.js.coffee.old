@app = angular.module("app", [ 'ngCookies', 'ngRoute', 'ngAnimate', 'ng-rails-csrf'] )
@app.siteUrl = "/kogarah"


@app.config(["$httpProvider", ($httpProvider) -> 
	authToken = $("meta[name=\"csrf-token\"]").attr("content")
	$httpProvider.defaults.headers.common["X-CSRF-Token"] = authToken
	#console.log authToken
])


@app.filter('capitalize', () ->
	return (input, scope) ->
		if input?
			input = input.toLowerCase()
			input.substring(0,1).toUpperCase() + input.substring(1)
)



@app.config(["$routeProvider", '$locationProvider', ($routeProvider, $locationProvider) -> 

	$locationProvider.html5Mode(true)
	$routeProvider.when("/help", { 
		templateUrl:  "/assets/layouts/ngView.html",
		resolve: { load: contentCtrl.loadView },
		controller: "pageCtrl",
		controllerAs: "pages"
		
	}).when("/about", {
		templateUrl:  "/assets/layouts/ngView.html",
		controller: "pageCtrl",
		controllerAs: "pages",
		resolve: { load: contentCtrl.loadView }
		
	}).when("/home", {
		templateUrl:  "/assets/layouts/ngView.html",
		controller: "pageCtrl",
		controllerAs: "pages",
		resolve: { load: contentCtrl.loadView }

	}).when("/users", {
		templateUrl: "/assets/layouts/ngView.html",
		controller: "usersCtrl",
		controllerAs: "users",
		resolve: { load: contentCtrl.loadView }

	}).when("/users/:id", {
		templateUrl:  "/assets/layouts/ngView.html",
		controller: "usersCtrl",
		controllerAs: "users",
		resolve: { load: contentCtrl.loadView }
	}).when("/users/:id/edit", {
		templateUrl:  "/assets/layouts/ngView.html",
		controller: "usersCtrl",
		controllerAs: "users",
		resolve: { load: contentCtrl.loadView }
	})

	
	

])

@app.run(["$rootScope", ($rootScope) -> 
	$rootScope.$on '$includeContentLoaded', ()->
		console.log "----- events( $includeContentLoaded )"
		$(document).foundation()
		contentCtrl.updatePage
	$rootScope.$on '$viewContentLoaded', ()->
		console.log "----- events( $viewContentLoaded )"
		$(document).foundation()
		contentCtrl.updatePage
])


@app.factory("ViewService", [ () ->
	return { 
		view:  { source: "json", site_url: "kogarah.localhost", current_user: null, path: null, flash: null, template: "", data: "", title: "Trainbuddy" }, 
		links: { root: "/", about: "/about", contact: "/contact", help: "/help", signin:"/signin", signup: "/signup"},
		pages: { menu_signin: "/assets/layouts/signin_menu.html", menu_user: "/assets/layouts/user_menu"},
		token: {},
		set: (data) ->
			this.view.source = data.source 
			this.view.site_url = if data.site_url? then data.site_url else "http://kogarah.localhost/"
			this.view.path = data.path
			this.view.flash = data.flash
			this.view.current_user = data.current_user
			this.view.template = if data.template? then data.template else ""
			this.view.data = data.data
			this.view.title = if data.title? then data.title else "Trainbuddy"
			return this
	}
])


@app.factory("Jsonp", ["$http", "$q", "$cookies",  "ViewService", ($http, $q, $cookies,  ViewService) -> 
	return {
		vs: ViewService
		, fetch: (url, params) ->
			if params? then params.callback = "JSON_CALLBACK" else params = {callback: "JSON_CALLBACK"}

			config = {params: params}
			console.log "---- params"
			console.log params
			if params.method 
				console.log "---- jsonp.fetch:: method = " + params.method

			conn = $http.jsonp(url, config)
			console.log "----  conn: "
			console.log conn
			conn.success( (data, status, header, config) -> 
				console.log "----  !!!! Jsonp.fetch success :: data ::"
				console.log data
				data
			).error( (data, status, header, config) ->
				console.log "---- !!! Jsonp.fetch failed"
				console.log(data, header, config)
				console.log "----- config:"
				console.log config
				config
				data
			)

		, updatePage: (title, scope) ->
			angular.element("title").html(title) if title?
			scope.$digest()

		, loadView: (url, params) ->
			console.log "---- Jsonp::loadView"
			#console.log params 
			if window.viewPreload? 
				ViewService.set(window.viewPreload)
				ViewService.token = $("meta[name=\"csrf-token\"]").attr("content")
				#console.log $cookies["XSRF-TOKEN"]
				window.viewPreload = null				
				console.log "---- jsonp::loadView: viewPreload - updated ViewService."
				console.log ViewService.view
				return ViewService.view
			else
				this.fetch(url, params).then( (res) ->
					console.log "---- jsonp::loadView: success"
					#res.data.current_user = {}
					ViewService.set(res.data)
					#console.log $cookies["XSRF-TOKEN"]
					ViewService.token = $cookies["XSRF-TOKEN"]
					#app.usersCtrl.setValues()
					return ViewService.view 
					
				, (res) -> 
					console.log "---- jsonp::loadView: failed. res =  "
					console.log res
					ViewService.view.flash = {error: "Network Error ! --- when connect to "+ url +"." }
					return ViewService.view
				)
	}
])





contentCtrl = @app.controller("contentCtrl", ["Jsonp", "$scope", "$rootScope", "$route", "$location",  (Jsonp, $scope, $rootScope, $route, $location) ->
	content = this
	$rootScope.$on("$routeChangeError", (event, current, prev, reject) -> 
		console.log "---- e( routeChangeError )"
		content.j.vs.view.flash = {error: "Network Error ! ---" + reject.message}
		console.log("---- path.current = "+content.j.vs.view.path.current)
	)
	
	content.j = Jsonp
	console.log "---- contentCtrl.init"
	content.l=$location

	content.updatePage = () ->
		content.j.updatePage(content.j.vs.view.title, $scope)	

	content.menu = () ->
		if content.j.vs.view.current_user then content.j.vs.pages.menu_user else content.j.vs.pages.menu_signin

	content.hideAlert = (key) ->
		delete content.j.vs.view.flash[key]		
	
	content.updateLocation = (path) ->
		oldPath = $location.path()
		console.log("---- content.updateLocation :: " + oldPath+ "  -->  " + path)
		if oldPath == path
			content.j.loadView(path, null)
			content.updatePage()
		else
			$scope.$apply($location.path(path))

	content.paginated_total = () ->
		if content.j.vs.view.data && content.j.vs.view.data.paginate && content.j.vs.view.data.paginate.total > 1
			content.j.vs.view.data.paginate.total
		else
			0

	content.paginated_link = (page) ->
		if !page || isNaN(page) || page < 1 || page >= content.j.vs.view.data.paginate.total
			content.j.vs.view.data.paginate.path
		else
			if content.j.vs.view.data.paginate.path.search(/\?/) > 1
				content.j.vs.view.data.paginate.path + "&page=" + page
			else
				content.j.vs.view.data.paginate.path + "?page=" + page
	
	return content
])

contentCtrl.loadView = ["$route", "$location", "$rootScope", "Jsonp", ($route, $location, $rootScope, Jsonp) ->
	params = if $route.current? then $route.current.params else null
	console.log($location.path(), params)

	Jsonp.loadView($location.path(), params )
	#Jsonp.vs.token = $("meta[name=\"csrf-token\"]").attr("content")
	console.log "--- loadView: Jsonp.vs updated Json.vs.view"
	console.log Jsonp.vs.view

]



	
pageCtrl = @app.controller("pageCtrl", () -> 
	page = this
	console.log "---- pageCtrl.init" 
	page
)

usersCtrl = @app.controller("usersCtrl", ["Jsonp", "$scope", "$rootScope", "$location",  (Jsonp, $scope, $rootScope, $location) -> 
	users = this
	users.j = Jsonp
	users.data = Jsonp.vs.view.data

	console.log "---- usersCtrl.init"

	console.log("----- Jsonp.vs.view")
	console.log Jsonp.vs.view

	users.formChecked = false
	
	users.submitForm = (form, event) ->
		if form.$invalid
			users.formChecked = true
			event.preventDefault()
			false
		else
			true

	users.fetchErrors = () ->
		console.log "-------users.checkErrors() - data.main.pack.extra"
		console.log users.j.vs.view.data.main.pack.extra
		if users.j.vs.view.data.main.pack.extra && users.j.vs.view.data.main.pack.extra.errors
			draw = angular.element("div.profile>div>div.draw")
			draw.click() if draw.attr("details") == "show"
			users.formChecked = false



	users.setValues = () ->
		console.log "----- users.setValues:: view.data.main"
		console.log users.j.vs.view
		console.log users.j.vs.view.data.main
		users.j = Jsonp
		if users.j.vs.view.data && users.j.vs.view.data.main && (users.j.vs.view.data.main.type == "user")
			users.user = users.j.vs.view.data.main.pack
			console.log "---- users.setViewValue - type=='user' "
			console.log users.user
		else
			if users.j.vs.view.data.main && users.j.vs.view.data.main.type
				console.log("---- users.setViewValue - type::unknown  = " + users.j.vs.view.data.main.type )
			else
				console.log("---- users.setViewValue - type::null")
				
			users.user = null


	users.user_paths = (id, action) ->
		switch action
			when "show" then "/users/"+id 
			when "edit" then "/users/"+id+"/edit"
			when "update" then "/users/"+id
			when "destroy" then "/users/"+id
			when "new" then "/users/new"
			# create#POST & index#GET
			else "/users"

	users.console = (text) ->
		console.log text

	#users.setValues()
	console.log "---- usersCtrl.end"	
	users
])	

usersCtrl.loadView = ["$route", "$location", "Jsonp", ($route, $location, Jsonp) ->
]


@app.directive "stations", () ->
	(scope, elem, attrs, event) ->
		elem.on 'mouseleave', (event) =>
			scope.$apply(attrs.stations)



@app.directive "details", ($animate, $compile) ->
	restrict: "A",
	link: (scope, elem, attrs, events) ->
		elem.on 'click', (event) =>
			cell = elem.parent().parent()
			slide = cell.children().first().next()
			console.log("---- details: " + attrs.details)
			switch attrs.details
				when "show"
					attrs.details = "hide"
					$animate.addClass( slide, "show", () ->
						cell.addClass("more")
					)
				when "hide"
					attrs.details = "show"
					$animate.removeClass(slide, "show", ()->
						cell.removeClass("more")
					)
				when "add"
					attrs.details = "remove"
					content = elem.parent()					
					newNode = createNode()
					$animate.enter(newNode, content.parent(), content, () ->
						cell.addClass("more")
					)					
					scope.$digest()			
				when "remove"
					attrs.details = "add"
					$animate.leave(slide, () ->
						cell.removeClass("more")
					) 
			scope.$digest()

createNode = () ->
	html="<div class='slide show'> <div>Action : #details=Add#  Added Slide</div> <div class='bg'></div> </div>"
	angular.element(html)


#users#index -  row>.top-bar  right cell options
###
@app.directive "menu", () ->
	restrict: "C",
	scope: {},
	link: (scope, elem, attrs, event) ->
		console.log "------ directive menu"
		elements = elem.find("a")
		elements.on 'mouseenter', (event) ->
			console.log "------ directive menu : enter"
			elem.addClass "menu-hover"
			$(this).addClass "dark-bg"
		elements.on 'mouseleave', (event) ->
			console.log "------ directive menu : leave"
			elem.removeClass "menu-hover"
			$(this).removeClass "dark-bg"
###

